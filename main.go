package main

import (
	"encoding/base64"
	"fmt"
	"os"

	"github.com/urfave/cli"
)

var build = "1" // build number set at compile time

func main() {
	app := cli.NewApp()
	app.Name = "Drone-Sonar-Plugin"
	app.Usage = "Drone plugin to integrate with SonarQube and check for Quality Gate."
	app.Action = run
	app.Version = fmt.Sprintf("1.0.%s", build)
	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name:   "key",
			Usage:  "project key",
			EnvVar: "PLUGIN_SONAR_KEY",
		},
		cli.StringFlag{
			Name:   "name",
			Usage:  "project name",
			EnvVar: "PLUGIN_SONAR_NAME",
		},
		cli.StringFlag{
			Name:   "host",
			Usage:  "SonarQube host",
			EnvVar: "PLUGIN_SONAR_HOST",
		},
		cli.StringFlag{
			Name:   "token",
			Usage:  "SonarQube token",
			EnvVar: "PLUGIN_SONAR_TOKEN",
		},
		cli.StringFlag{
			Name:   "ver",
			Usage:  "Project version",
			EnvVar: "PLUGIN_BUILD_NUMBER",
		},
		cli.StringFlag{
			Name:   "branch",
			Usage:  "Project branch",
			EnvVar: "PLUGIN_BRANCH",
		},
		cli.StringFlag{
			Name:   "timeout",
			Usage:  "Web request timeout",
			Value:  "300",
			EnvVar: "PLUGIN_TIMEOUT",
		},
		cli.StringFlag{
			Name:   "sources",
			Usage:  "analysis sources",
			Value:  ".",
			EnvVar: "PLUGIN_SOURCES",
		},
		cli.StringFlag{
			Name:   "inclusions",
			Usage:  "code inclusions",
			EnvVar: "PLUGIN_INCLUSIONS",
		},
		cli.StringFlag{
			Name:   "exclusions",
			Usage:  "code exclusions",
			EnvVar: "PLUGIN_EXCLUSIONS",
		},
		cli.StringFlag{
			Name:   "level",
			Usage:  "log level",
			Value:  "INFO",
			EnvVar: "PLUGIN_LEVEL,PLUGIN_SONAR_LEVEL",
		},
		cli.StringFlag{
			Name:   "showProfiling",
			Usage:  "showProfiling during analysis",
			Value:  "false",
			EnvVar: "PLUGIN_SHOWPROFILING",
		},
		cli.BoolFlag{
			Name:   "branchAnalysis",
			Usage:  "execute branchAnalysis",
			EnvVar: "PLUGIN_BRANCHANALYSIS",
		},
		cli.BoolFlag{
			Name:   "usingProperties",
			Usage:  "using sonar-project.properties",
			EnvVar: "PLUGIN_USINGPROPERTIES",
		},
		cli.StringFlag{
			Name:   "binaries",
			Usage:  "Java Binaries",
			EnvVar: "PLUGIN_BINARIES,JAVA_BINARIES",
		},
		cli.StringFlag{
			Name:   "quality",
			Usage:  "Quality Gate",
			EnvVar: "SONAR_QUALITYGATE,PLUGIN_QUALITYGATE",
			Value:  "OK",
		},
		cli.StringFlag{
			Name:   "quality_gate_enabled",
			Usage:  "true or false - stop pipeline if sonar quality gate conditions are not met",
			Value:  "true",
			EnvVar: "PLUGIN_SONAR_QUALITY_ENABLED",
		},
		cli.StringFlag{
			Name:   "quality_gate_type",
			Usage:  "if this setting is not set the default is analysisID, if you want to use other QG checks then choose: branch, pullRequest or projectKey",
			Value:  "analysisID",
			EnvVar: "PLUGIN_QG_TYPE",
		},
		cli.StringFlag{
			Name:   "qualitygate_timeout",
			Usage:  "number in seconds for timeout",
			Value:  "300",
			EnvVar: "PLUGIN_SONAR_QUALITYGATE_TIMEOUT",
		},
		cli.StringFlag{
			Name:   "artifact_file",
			Usage:  "Artifact file location that will be generated by the plugin. This file will include information of docker images that are uploaded by the plugin.",
			Value:  "artifact.json",
			EnvVar: "PLUGIN_ARTIFACT_FILE",
		},
		cli.StringFlag{
			Name:   "output-file",
			Usage:  "Output file location that will be generated by the plugin. This file will include information of the output that are exported by the plugin.",
			EnvVar: "DRONE_OUTPUT",
		},
		cli.StringFlag{
			Name:   "javascript_icov_reportPath",
			Usage:  "Sonar Javascript Icov Report Path parameter",
			Value:  "",
			EnvVar: "PLUGIN_JAVASCRIPT_ICOV_REPORTPATH",
		},
		cli.StringFlag{
			Name:   "java_coverage_plugin",
			Usage:  "Sonar Java Plugin parameter",
			Value:  "",
			EnvVar: "PLUGIN_JAVA_COVERAGE_PLUGIN",
		},
		cli.StringFlag{
			Name:   "jacoco_report_path",
			Usage:  "Sonar Javascript Jacoco Report Path parameter",
			Value:  "",
			EnvVar: "PLUGIN_JACOCO_REPORT_PATH",
		},
		cli.StringFlag{
			Name:   "ssl_keystore_pwd",
			Usage:  "Java Keystore Password",
			Value:  "",
			EnvVar: "PLUGIN_JAVA_KEYSTORE_PWD",
		},
		cli.StringFlag{
			Name:   "cacerts_location",
			Usage:  "Java Truststore Location (cacerts)",
			Value:  "",
			EnvVar: "PLUGIN_CACERTS_LOCATION",
		},
		cli.StringFlag{
			Name:   "junit_reportpaths",
			Usage:  "JUnit Report Paths",
			Value:  "",
			EnvVar: "PLUGIN_JUNIT_REPORTPATHS",
		},
		cli.StringFlag{
			Name:   "source_encoding",
			Usage:  "Source Encoding",
			Value:  "",
			EnvVar: "PLUGIN_SOURCE_ENCODING",
		},
		cli.StringFlag{
			Name:   "tests",
			Usage:  "Sonar Tests",
			Value:  "",
			EnvVar: "PLUGIN_TESTS",
		},
		cli.StringFlag{
			Name:   "java_test",
			Usage:  "Java Test",
			Value:  "",
			EnvVar: "PLUGIN_JAVA_TEST",
		},
		cli.StringFlag{
			Name:   "pr_key",
			Usage:  "PR Key",
			Value:  "",
			EnvVar: "PLUGIN_PR_KEY",
		},
		cli.StringFlag{
			Name:   "pr_branch",
			Usage:  "PR Branch",
			Value:  "",
			EnvVar: "PLUGIN_PR_BRANCH",
		},
		cli.StringFlag{
			Name:   "pr_base",
			Usage:  "PR Base",
			Value:  "",
			EnvVar: "PLUGIN_PR_BASE",
		},
		cli.StringFlag{
			Name:   "coverage_exclusion",
			Usage:  "sonar.coverage.exclusions",
			Value:  "",
			EnvVar: "PLUGIN_COVERAGE_EXCLUSION",
		},
		cli.StringFlag{
			Name:   "java_source",
			Usage:  "sonar.java.source",
			Value:  "",
			EnvVar: "PLUGIN_JAVA_SOURCE",
		},
		cli.StringFlag{
			Name:   "java_libraries",
			Usage:  "sonar.java.libraries",
			Value:  "",
			EnvVar: "PLUGIN_JAVA_LIBRARIES",
		},
		cli.StringFlag{
			Name:   "surefire_reportsPath",
			Usage:  "sonar.surefire.reportsPath",
			Value:  "",
			EnvVar: "PLUGIN_SUREFIRE_REPORTSPATH",
		},
		cli.StringFlag{
			Name:   "typescript_lcov_reportPaths",
			Usage:  "sonar.typescript.lcov.reportPaths",
			Value:  "",
			EnvVar: "PLUGIN_TYPESCRIPT_LCOV_REPORTPATHS",
		},
		cli.StringFlag{
			Name:   "verbose",
			Usage:  "sonar.verbose",
			Value:  "",
			EnvVar: "PLUGIN_VERBOSE",
		},
		cli.StringFlag{
			Name:   "custom_jvm_params",
			Usage:  "you can pass jvm param directly and use comma for multiples params ex: -Dsonar.java.source='value_you_want'",
			Value:  "",
			EnvVar: "PLUGIN_CUSTOM_JVM_PARAMS",
		},
		cli.StringFlag{
			Name:   "taskid",
			Usage:  "sonar analisys taskid",
			Value:  "",
			EnvVar: "PLUGIN_TASKID",
		},
		cli.BoolFlag{
			Name:   "skip_scan",
			Usage:  "Skip the SonarQube scan",
			EnvVar: "PLUGIN_SKIP_SCAN",
		},
		cli.BoolTFlag{
			Name:   "wait_qualitygate",
			Usage:  "Wait for the SonarQube quality gate",
			EnvVar: "PLUGIN_WAIT_QUALITYGATE",
		},
		cli.StringFlag{
			Name:   "workspace",
			Usage:  "sonar workspace execution",
			Value:  "/harness",
			EnvVar: "PLUGIN_WORKSPACE",
		},
		cli.StringFlag{
			Name:   "sonar_scanner_opts",
			Usage:  "sonar scanner jvm ops",
			EnvVar: "PLUGIN_SONAR_SCANNER_OPTS",
		},
		cli.BoolTFlag{
			Name:   "sonar_config_file",
			Usage:  "Use sonar-project.properties if available",
			EnvVar: "PLUGIN_SONAR_CONFIG_FILE",
		},
		cli.BoolTFlag{
			Name:   "sonar_config_file_override",
			Usage:  "Use sonar-project.properties if available and override host, login or/and project key",
			EnvVar: "PLUGIN_SONAR_CONFIG_FILE_OVERRIDE",
		},
		cli.IntFlag{
			Name:   "quality_gate_error_exit_code",
			Usage:  "Choose \"exit code\" error when quality gate fail. default = 5",
			Value:  5,
			EnvVar: "PLUGIN_QUALITY_GATE_ERROR_EXIT_CODE",
		},
	}
	app.Run(os.Args)
}
func run(c *cli.Context) {
	plugin := Plugin{
		Config: Config{
			Key:                        c.String("key"),
			Name:                       c.String("name"),
			Host:                       c.String("host"),
			Token:                      c.String("token"),
			Version:                    c.String("ver"),
			Branch:                     c.String("branch"),
			Timeout:                    c.String("timeout"),
			Sources:                    c.String("sources"),
			Inclusions:                 c.String("inclusions"),
			Exclusions:                 c.String("exclusions"),
			Level:                      c.String("level"),
			ShowProfiling:              c.String("showProfiling"),
			BranchAnalysis:             c.Bool("branchAnalysis"),
			UsingProperties:            c.Bool("usingProperties"),
			Binaries:                   c.String("binaries"),
			Quality:                    c.String("quality"),
			QualityEnabled:             c.String("quality_gate_enabled"),
			ArtifactFile:               c.String("artifact_file"),
			QualityTimeout:             c.String("qualitygate_timeout"),
			JavascitptIcovReport:       c.String("javascript_icov_reportPath"),
			JavaCoveragePlugin:         c.String("java_coverage_plugin"),
			JacocoReportPath:           c.String("jacoco_report_path"),
			SSLKeyStorePassword:        c.String("ssl_keystore_pwd"),
			CacertsLocation:            c.String("cacerts_location"),
			JunitReportPaths:           c.String("junit_reportpaths"),
			SourceEncoding:             c.String("source_encoding"),
			SonarTests:                 c.String("tests"),
			JavaTest:                   c.String("java_test"),
			PRKey:                      c.String("pr_key"),
			PRBranch:                   c.String("pr_branch"),
			PRBase:                     c.String("pr_base"),
			CoverageExclusion:          c.String("coverage_exclusion"),
			JavaSource:                 c.String("java_source"),
			JavaLibraries:              c.String("java_libraries"),
			SurefireReportsPath:        c.String("surefire_reportsPath"),
			TypescriptLcovReportPaths:  c.String("typescript_lcov_reportPaths"),
			Verbose:                    c.String("verbose"),
			CustomJvmParams:            c.String("custom_jvm_params"),
			TaskId:                     c.String("taskid"),
			SkipScan:                   c.Bool("skip_scan"),
			WaitQualityGate:            c.Bool("wait_qualitygate"),
			Workspace:                  c.String("workspace"),
			SonarOPS:                   c.String("sonar_scanner_opts"),
			UseSonarConfigFile:         c.Bool("sonar_config_file"),
			UseSonarConfigFileOverride: c.Bool("sonar_config_file_override"),
			QualityGateErrorExitCode:   c.Int("quality_gate_error_exit_code"),
		},
		Output: Output{
			OutputFile: c.String("output-file"),
		},
	}
	os.Setenv("TOKEN", base64.StdEncoding.EncodeToString([]byte(c.String("token")+":")))
	if err := plugin.Exec(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
